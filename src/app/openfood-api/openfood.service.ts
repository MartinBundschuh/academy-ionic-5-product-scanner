/**
 * The Open Food Repo API
 *
 * API access to The Open Food Repo data, You need to sign_up to get an API key
 *
 * Find more documentation and code samples at https://github.com/salathegroup/foodrepo_api
 *
 * OpenAPI spec version: 3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Configuration } from './configuration';

@Injectable({
  providedIn: 'root'
})
export class OpenFoodService {

  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() basePath: string, @Optional() configuration: Configuration) {

    if (configuration) {
      this.configuration = configuration;
    }

    this.defaultHeaders = new HttpHeaders()
      .set('Accept', 'application/json')
      .set('Authorization', 'Token token=' + this.configuration.apiKey);
  }

  /**
   * Returns a single product from The Open Food Repo.
   * &lt;div class&#x3D;\&quot;padded-text\&quot;&gt;   &lt;h1&gt;⚠️ DO NOT USE THIS ENDPOINT TO CRAWL OUR DATABASE ⚠️&lt;/h1&gt;   For those of you who would like to get all of our products, &lt;i&gt;please&lt;/i&gt; use the &lt;a href&#x3D;\&quot;#default_listProducts\&quot;&gt;&lt;code&gt;/products&lt;/code&gt; endpoint&lt;/a&gt; below instead of this one.   With compression enabled and using the max page size, you will notice a significant speed improvement.   &lt;br /&gt;   We of course won&#x27;t stop you from using this endpoint to crawl, but we&#x27;d like to &lt;b&gt;strongly discourage&lt;/b&gt; it for anything other than getting a few products whose &lt;code&gt;id&lt;/code&gt;s are known to your app in advance. &lt;/div&gt; 
   * @param id ID of the Product
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findProductById(id: number): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findProductById.');
    }

    return this.httpClient.request<any>('get', `${this.configuration.basePath}/products/${encodeURIComponent(String(id))}`,
      {
        headers: this.defaultHeaders
      }
    );
  }

  /**
   * All products in the Open Food Repo database.
   * This endpoint is the preferred way of crawling through our database, getting hundreds of products per request. Use the &lt;b&gt;RESPONSE.links.next&lt;/b&gt; url to iteratively get all products, one page at a time. 
   * @param excludes Comma-separated list of fields to exclude from the result.
   * @param barcodes Comma-separated list of barcodes to search by, using boolean OR for multiple values.
   * @param pageSize Paging for the result set. Default products per page is &lt;b&gt;20&lt;/b&gt;. Maximum: 200
   * @param pageNumber Paging for the result set. Default page number is is &lt;b&gt;1&lt;/b&gt;.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listProducts(excludes?: Array<string>, barcodes?: Array<string>, pageSize?: number, pageNumber?: number): Observable<any> {

    let queryParameters = new HttpParams();

    if (excludes !== undefined) {
      queryParameters = queryParameters.set('excludes', String(excludes));
    }

    if (barcodes !== undefined) {
      queryParameters = queryParameters.set('barcodes', String(barcodes));
    }

    if (pageSize !== undefined) {
      queryParameters = queryParameters.set('page[size]', String(pageSize));
    }

    if (pageNumber !== undefined) {
      queryParameters = queryParameters.set('page[number]', String(pageNumber));
    }

    return this.httpClient.request<any>('get', `${this.configuration.basePath}/products`,
      {
        params: queryParameters,
        headers: this.defaultHeaders
      }
    );
  }

}
